// Tokens list 
typedef enum _token_t {
    FIRST+:,
    Need,
    S_ADD,
    S_BRACK_EXP,
    S_CODE,
    S_DATA,
    S_EXP,
    S_EXP_A,
    S_EXP_LIST,
    S_FUNC,
    S_FUNC_DEC,
    S_FUNC_DEF,
    S_IDLIST,
    S_PARM_LIST,
    S_PARM_LIST_A,
    S_PARM_LIST_B,
    S_PARM_LIST_C,
    S_START,
    S_START_A,
    S_STATE,
    S_STATEMENT,
    S_STATEMENT_A,
    S_STATENENT_A,
    S_STATMENT,
    S_TERM,
    S_TYPE,
    T_ADD,
    T_COMMA,
    T_COMMENT,
    T_E,
    T_EOF,
    T_EQ,
    T_LBRAC,
    T_LBRACE,
    T_LBRACK,
    T_LPAR,
    T_MCOMMENT,
    T_META,
    T_MINUS,
    T_NUMBER,
    T_OP,
    T_RBRACE,
    T_RBRACK,
    T_RPAR,
    T_SEMI,
    T_TYPE,
    T_VAR,
    T_VOID,
    T_e,
    info,
    mroe,
} token_t;

//name mapping
const char * tokenName[] = {
    "FIRST+:",
    "Need",
    "S_ADD",
    "S_BRACK_EXP",
    "S_CODE",
    "S_DATA",
    "S_EXP",
    "S_EXP_A",
    "S_EXP_LIST",
    "S_FUNC",
    "S_FUNC_DEC",
    "S_FUNC_DEF",
    "S_IDLIST",
    "S_PARM_LIST",
    "S_PARM_LIST_A",
    "S_PARM_LIST_B",
    "S_PARM_LIST_C",
    "S_START",
    "S_START_A",
    "S_STATE",
    "S_STATEMENT",
    "S_STATEMENT_A",
    "S_STATENENT_A",
    "S_STATMENT",
    "S_TERM",
    "S_TYPE",
    "T_ADD",
    "T_COMMA",
    "T_COMMENT",
    "T_E",
    "T_EOF",
    "T_EQ",
    "T_LBRAC",
    "T_LBRACE",
    "T_LBRACK",
    "T_LPAR",
    "T_MCOMMENT",
    "T_META",
    "T_MINUS",
    "T_NUMBER",
    "T_OP",
    "T_RBRACE",
    "T_RBRACK",
    "T_RPAR",
    "T_SEMI",
    "T_TYPE",
    "T_VAR",
    "T_VOID",
    "T_e",
    "info",
    "mroe",
};
#define TERM_COUNT 23
#define SYM_COUNT  24
