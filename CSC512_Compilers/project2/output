./scanner.c
TOKEN : T_META    [#ifndef _SCANNER_C_]
TOKEN : T_META    [#define _SCANNER_C_]
TOKEN : T_META    [#include <stdio.h>]
TOKEN : T_META    [#include <stdlib.h>]
TOKEN : T_META    [#include <string.h>]
TOKEN : T_META    [#include <ctype.h>]
TOKEN : T_META    [#include <stdbool.h>]
TOKEN : T_META    [#include <unistd.h>]
TOKEN : T_META    [#include <limits.h>]
TOKEN : T_META    [#include <fcntl.h>]
TOKEN : T_META    [#include <sys/stat.h>]
TOKEN : T_META    [#include <sys/types.h>]
TOKEN : T_META    [#include "./buffer.h"]
TOKEN : T_META    [#include "./scanner.h"]
TOKEN : T_META    [#define true  1]
TOKEN : T_META    [#define false 0 ]
TOKEN : T_IDENT   [const]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [reserved_word]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [RESERVED_WORD_COUNT]
TOKEN : T_OP      []]
TOKEN : T_OP      [=]
TOKEN : T_OP      [{]
TOKEN : T_STRING  ["main"]
TOKEN : T_OP      [,]
TOKEN : T_COMMENT [//I cheated a little. ]
TOKEN : T_STRING  ["int"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["void"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["if"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["while"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["return"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["read"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["write"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["print"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["continue"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["break"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["binary"]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["decimal"]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_COMMENT [//Local functions.]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [charIn]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [const]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [isReserved]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Buffer]
TOKEN : T_IDENT   [b]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [outFile]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [const]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeIdent]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeMeta]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeString]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeMulitlineComment]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeOp]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeNumber]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeComment]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_COMMENT [// I want my "Parser" to "have" a scanner, so lets make scanner OOP.]
TOKEN : T_COMMENT [// // Changes from last time -- We need to:]
TOKEN : T_COMMENT [//    1.) take our redirects and make them non global. ]
TOKEN : T_COMMENT [//    2.) store state so I can demand a token as they are needed by the object owner. ]
TOKEN : T_COMMENT [//    4.) Implement getNext()]
TOKEN : T_COMMENT [//    5.) Implement constructor destructor. ]
TOKEN : T_COMMENT [//    6.) Implement objects for terminals (structs with label (Token)) ]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [Scanner_new]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [const]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [const]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [outFile]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [malloc]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [sizeof]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [struct]
TOKEN : T_IDENT   [_scanner]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [=]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [errCnt]
TOKEN : T_OP      [=]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [outFlag]
TOKEN : T_OP      [=]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [in]
TOKEN : T_OP      [=]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [NULL]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [stdin]
TOKEN : T_IDENT   [fopen]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["r"]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [out]
TOKEN : T_OP      [=]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [outFile]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [NULL]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [stdout]
TOKEN : T_IDENT   [fopen]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [outFile]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["w"]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [Buffer_new]
TOKEN : T_OP      [(]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_EMPTY]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [getc]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [in]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [Scanner_free]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_free]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [free]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [Scanner_setOutput]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [,]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [output]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [outFlag]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [output]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [getc]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [in]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_COMMENT [// This will load the Scanner->token data with the next good token. ]
TOKEN : T_COMMENT [// It will overwrite the last token. The return will return the same ]
TOKEN : T_COMMENT [// memory location everytime, so the return is just for synatic sugar. ]
TOKEN : T_IDENT   [Token]
TOKEN : T_IDENT   [Scanner_nextToken]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_COMMENT [// One of these braches will build a new token. ]
TOKEN : T_COMMENT [// if I get to the final else, I will skip a char and try again. ]
TOKEN : T_COMMENT [// otherwise ive built a new good token.]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [EOF]
TOKEN : T_OP      [)]
TOKEN : T_KEYWORD [return]
TOKEN : T_IDENT   [Token_new]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [T_EOF]
TOKEN : T_OP      [,]
TOKEN : T_STRING  [""]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [false]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [else]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [isalpha]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [||]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [_]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [consumeIdent]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [else]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [isdigit]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [consumeNumber]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [else]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_META    [#' )]
TOKEN : T_IDENT   [consumeMeta]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [else]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_OP      ["' )]
TOKEN : T_IDENT   [consumeString]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [else]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [charIn]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["(){}[],;+-*/<>=|&!"]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [consumeOp]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [else]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_IDENT   [Scanner_nextToken]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [return]
TOKEN : T_IDENT   [Token_new]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [stack]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [false]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [charIn]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [const]
TOKEN : T_IDENT   [char]
TOKEN : T_IDENT   [c]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [string]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [string]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [while]
TOKEN : T_OP      [(]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [!=]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [c]
TOKEN : T_OP      [)]
TOKEN : T_KEYWORD [return]
TOKEN : T_NUMBER  [1]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [return]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [isReserved]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Buffer]
TOKEN : T_IDENT   [b]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [for]
TOKEN : T_OP      [(]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [=]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [<]
TOKEN : T_IDENT   [RESERVED_WORD_COUNT]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [strcmp]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [reserved_word]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      []]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [b]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [stack]
TOKEN : T_OP      [)]
TOKEN : T_OP      [==]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [)]
TOKEN : T_KEYWORD [return]
TOKEN : T_NUMBER  [1]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [return]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [outFile]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [const]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_IDENT   [newString]
TOKEN : T_OP      [=]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [*]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [malloc]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [sizeof]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [char]
TOKEN : T_OP      [)]
TOKEN : T_OP      [*]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [strlen]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [)]
TOKEN : T_OP      [+]
TOKEN : T_NUMBER  [4]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [strIndex]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [strlen]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [)]
TOKEN : T_OP      [+]
TOKEN : T_NUMBER  [4]
TOKEN : T_OP      [;]
TOKEN : T_COMMENT [//I add four chars and its index from 0.]
TOKEN : T_IDENT   [for]
TOKEN : T_OP      [(]
TOKEN : T_KEYWORD [int]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [strlen]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [>=]
TOKEN : T_NUMBER  [0]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      [-]
TOKEN : T_OP      [-]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [newString]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [strIndex]
TOKEN : T_OP      [-]
TOKEN : T_OP      [-]
TOKEN : T_OP      []]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      []]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [inFile]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [i]
TOKEN : T_OP      []]
TOKEN : T_OP      [==]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [newString]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [strIndex]
TOKEN : T_OP      [-]
TOKEN : T_OP      [-]
TOKEN : T_OP      []]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [newString]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [strIndex]
TOKEN : T_OP      [-]
TOKEN : T_OP      [-]
TOKEN : T_OP      []]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [e]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [newString]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [strIndex]
TOKEN : T_OP      [-]
TOKEN : T_OP      [-]
TOKEN : T_OP      []]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [g]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [newString]
TOKEN : T_OP      [[]
TOKEN : T_IDENT   [strIndex]
TOKEN : T_OP      [-]
TOKEN : T_OP      [-]
TOKEN : T_OP      []]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [_]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [return]
TOKEN : T_IDENT   [newString]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeIdent]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_reset]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [while]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [true]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [isalpha]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [||]
TOKEN : T_IDENT   [isdigit]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [||]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [_]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [else]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [isReserved]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_KEYWORD]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [else]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_IDENT]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeMeta]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_reset]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [while]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [true]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_META]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [else]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeString]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_reset]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [while]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [true]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [||]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [EOF]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [errCnt]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [fprintf]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [stderr]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["Error at line %d: Unterminated String\n\t>>%s\n\n"]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [stack]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_OP      ["' ) {]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_STRING]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeMulitlineComment]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_COMMENT [//This consume is non standard as it does not come from the main loop]
TOKEN : T_COMMENT [//but instead from the operator consume which identifies the opening of the comment. ]
TOKEN : T_COMMENT [//In this case DO NOT reset the buffer. ]
TOKEN : T_IDENT   [char]
TOKEN : T_IDENT   [this]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [char]
TOKEN : T_IDENT   [that]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [this]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [that]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [while]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [true]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [this]
TOKEN : T_OP      [==]
TOKEN : T_OP      [*]
TOKEN : T_OP      [&&]
TOKEN : T_IDENT   [that]
TOKEN : T_OP      [==]
TOKEN : T_OP      [/]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [this]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [that]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_MCOMMENT]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [this]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [this]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [that]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [that]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [that]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [)]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeOp]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_COMMENT [// Every if here should have a return, ]
TOKEN : T_COMMENT [// otherwise you might break the logic. ]
TOKEN : T_IDENT   [char]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [char]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Buffer_reset]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_COMMENT [// if a garunteed on length op - return. ]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [charIn]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["(){}[],;+-*"]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_OP]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_COMMENT [// if a valid 2 length non comment]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [charIn]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["=<>!"]
TOKEN : T_OP      [)]
TOKEN : T_OP      [&&]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [==]
TOKEN : T_OP      [=]
TOKEN : T_OP      [)]
TOKEN : T_OP      [||]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [==]
TOKEN : T_OP      [|]
TOKEN : T_OP      [&&]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [==]
TOKEN : T_OP      [|]
TOKEN : T_OP      [)]
TOKEN : T_OP      [||]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [==]
TOKEN : T_OP      [&]
TOKEN : T_OP      [&&]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [==]
TOKEN : T_OP      [&]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_OP]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_COMMENT [// if a one line comment ]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [==]
TOKEN : T_OP      [/]
TOKEN : T_OP      [&&]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [==]
TOKEN : T_OP      [/]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_IDENT   [consumeComment]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_COMMENT [// if a multiline comment]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [==]
TOKEN : T_OP      [/]
TOKEN : T_OP      [&&]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [==]
TOKEN : T_OP      [*]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [second]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_IDENT   [consumeMulitlineComment]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_COMMENT [// if not a 2 char, at this point its a one char. ]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [charIn]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [first]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["=></"]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_OP]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [errCnt]
TOKEN : T_OP      [+]
TOKEN : T_OP      [+]
TOKEN : T_OP      [;]
TOKEN : T_IDENT   [fprintf]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [stderr]
TOKEN : T_OP      [,]
TOKEN : T_STRING  ["Error at line %d: Illegal Character\n\t>> %s\n\n"]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [lineNo]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [stack]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeNumber]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_reset]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [while]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [true]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [isdigit]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [else]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_NUMBER]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [void]
TOKEN : T_IDENT   [consumeComment]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [Scanner]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_COMMENT [//This consume is non standard as it does not come from the main loop]
TOKEN : T_COMMENT [//but instead from the operator consume which identifies the opening of the comment. ]
TOKEN : T_COMMENT [//In this case DO NOT reset the buffer. ]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [while]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [true]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [Scanner_nextChar]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [if]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [n]
TOKEN : T_OP      [||]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [==]
TOKEN : T_IDENT   [EOF]
TOKEN : T_OP      [)]
TOKEN : T_OP      [{]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [token]
TOKEN : T_OP      [=]
TOKEN : T_IDENT   [T_COMMENT]
TOKEN : T_OP      [;]
TOKEN : T_KEYWORD [return]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_IDENT   [Buffer_write]
TOKEN : T_OP      [(]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [buffer]
TOKEN : T_OP      [,]
TOKEN : T_IDENT   [s]
TOKEN : T_OP      [-]
TOKEN : T_OP      [>]
TOKEN : T_IDENT   [cur]
TOKEN : T_OP      [)]
TOKEN : T_OP      [;]
TOKEN : T_OP      [}]
TOKEN : T_OP      [}]
TOKEN : T_OP      [;]
TOKEN : T_META    [#endif]
TOKEN : T_EOF     []
