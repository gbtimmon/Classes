--SYMBOLS--
   Symbol [ func state_0 -1 ]
   Symbol [ func state_1 -1 ]
   Symbol [ func state_2 -1 ]
   Symbol [ func state_3 -1 ]
   Symbol [ func getnextdigit -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
   Symbol [ int n 0 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int state_0 ();

int state_1 ();

int state_2 ();

int state_3 ();

int getnextdigit (){

    int local[2];


    label_0: ;
    if(0==0) goto labal_2;
    goto label_1;
    label_2: ;
        print ( "Give me a number (-1 to quit): " );
        read ( local[0] );
        local[1] = - 1;
        if(local[1]<=local[0] )  goto label_3;
        goto label_4;
        label_3: ;
            goto label_1
        label_4: ;
        print ( "I need a number that's either 0 or 1.\n" );
    goto label_0: ;
    label_1: ;
    return local[0];
};
int state_0 (){

    int local[3];


    local[1] = getnextdigit ( );
    local[0] = local[1];
    local[2] = - 1;
    if(local[2]==local[0])  goto label_5;
    goto label_6;
    label_5: ;
        print ( "You gave me an even number of 0's.\n" );
        print ( "You gave me an even number of 1's.\n" );
        print ( "I therefore accept this input.\n" );
        return;
    label_6: ;
    if(0==local[0])  goto label_7;
    goto label_8;
    label_7: ;
        state_2 ( );
    label_8: ;
    if(1==local[0])  goto label_9;
    goto label_10;
    label_9: ;
        state_1 ( );
    label_10: ;
};
int state_1 (){

    int local[3];


    local[1] = getnextdigit ( );
    local[0] = local[1];
    local[2] = - 1;
    if(local[2]==local[0])  goto label_11;
    goto label_12;
    label_11: ;
        print ( "You gave me an even number of 0's.\n" );
        print ( "You gave me an odd number of 1's.\n" );
        print ( "I therefore reject this input.\n" );
        return;
    label_12: ;
    if(0==local[0])  goto label_13;
    goto label_14;
    label_13: ;
        state_3 ( );
    label_14: ;
    if(1==local[0])  goto label_15;
    goto label_16;
    label_15: ;
        state_0 ( );
    label_16: ;
};
int state_2 (){

    int local[3];


    local[1] = getnextdigit ( );
    local[0] = local[1];
    local[2] = - 1;
    if(local[2]==local[0])  goto label_17;
    goto label_18;
    label_17: ;
        print ( "You gave me an odd number of 0's.\n" );
        print ( "You gave me an even number of 1's.\n" );
        print ( "I therefore reject this input.\n" );
        return;
    label_18: ;
    if(0==local[0])  goto label_19;
    goto label_20;
    label_19: ;
        state_0 ( );
    label_20: ;
    if(1==local[0])  goto label_21;
    goto label_22;
    label_21: ;
        state_3 ( );
    label_22: ;
};
int state_3 (){

    int local[3];


    local[1] = getnextdigit ( );
    local[0] = local[1];
    local[2] = - 1;
    if(local[2]==local[0])  goto label_23;
    goto label_24;
    label_23: ;
        print ( "You gave me an odd number of 0's.\n" );
        print ( "You gave me an odd number of 1's.\n" );
        print ( "I therefore reject this input.\n" );
        return;
    label_24: ;
    if(0==local[0])  goto label_25;
    goto label_26;
    label_25: ;
        state_1 ( );
    label_26: ;
    if(1==local[0])  goto label_27;
    goto label_28;
    label_27: ;
        state_2 ( );
    label_28: ;
};
int main (){

    state_0 ( );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func recursedigit -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int on 0 ]
   Symbol [ int n 1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int recursedigit ( int n ){

    int local[6];

    local[1] = n;

    if(0==local[1])  goto label_0;
    goto label_1;
    label_0: ;
        return;
    label_1: ;
    local[0] = 0;
    local[4] = local[1] / 2;
    local[3] = local[4] * 2;
    local[2] = local[1] - local[3];
    if(0!=local[2])  goto label_2;
    goto label_3;
    label_2: ;
        local[0] = 1;
    label_3: ;
    local[5] = local[1] / 2;
    recursedigit ( local[5] );
    if(0==local[0])  goto label_4;
    goto label_5;
    label_4: ;
        print ( "0" );
    label_5: ;
    if(1==local[0])  goto label_6;
    goto label_7;
    label_6: ;
        print ( "1" );
    label_7: ;
};
int main (){

    int local[1];

    local[0] = 0;
    label_8: ;
    if(0>=local[0]) goto labal_10;
    goto label_9;
    label_10: ;
        print ( "Give me a number: " );
        read ( local[0] );
        if(0>=local[0])  goto label_11;
        goto label_12;
        label_11: ;
            print ( "I need a positive integer.\n" );
        label_12: ;
    goto label_8: ;
    label_9: ;
    print ( "The binary representation of: " );
    write ( local[0] );
    print ( "is: " );
    recursedigit ( local[0] );
    print ( "\n\n" );
};

===EXIT NORMAL!===
INFO : removing unused var d.
INFO : removing unused var f.
--SYMBOLS--
   Symbol [ func f0 -1 ]
--SYMBOLS--
   Symbol [ int c 0 ]
   Symbol [ int e 5 ]
int f0 ( int e, int f ){

    int local[6];

    local[5] = e;

    local[0] = local[5];
    local[0] = 0;
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int main (){

    int local[2];

    read ( local[0] );
    read ( local[1] );
    if(local[0]>=local[1])  goto label_0;
    goto label_1;
    label_0: ;
        write ( local[0] );
    label_1: ;
    if(local[1]>local[0])  goto label_2;
    goto label_3;
    label_2: ;
        write ( local[1] );
    label_3: ;
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func a -1 ]
   Symbol [ func b -1 ]
   Symbol [ func c -1 ]
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
int a (){

    a ( );
    b ( );
    c ( );
};
int b (){

    a ( );
    b ( );
    c ( );
};
int c (){

    a ( );
    b ( );
    c ( );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int sum 1 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int main (){

    int local[5];

    read ( local[0] );
    local[3] = local[0] + 1;
    local[4] = 2 / local[0];
    local[2] = local[3] * local[4];
    local[1] = local[2];
    write ( local[1] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ int array 0 ]
   Symbol [ func initialize_array -1 ]
   Symbol [ func fib -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
--SYMBOLS--
   Symbol [ int val 0 ]
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int global[16];
int initialize_array (){

    int local[4];


    local[1] = 16;
    local[0] = 0;
    label_0: ;
    if(local[0]<local[1]) goto labal_2;
    goto label_1;
    label_2: ;
        local[2] = - 1;
        global[0] = local[2];
        local[3] = local[0] + 1;
        local[0] = local[3];
    goto label_0: ;
    label_1: ;
};
int fib ( int val ){

    int local[9];

    local[0] = val;

    if(local[0]<2)  goto label_3;
    goto label_4;
    label_3: ;
        return 1;
    label_4: ;
    local[1] = global[0] local[0];
    local[2] = - 1;
    if(local[1]==local[2])  goto label_5;
    goto label_6;
    label_5: ;
        local[5] = local[0] - 1;
        local[4] = fib ( local[5] );
        local[7] = local[0] - 2;
        local[6] = fib ( local[7] );
        local[3] = local[4] + local[6];
        global[0] = local[3];
    label_6: ;
    local[8] = global[0] local[0];
    return local[8];
};
int main (){

    int local[4];


    local[1] = 16;
    initialize_array ( );
    local[0] = 0;
    print ( "The first few digits of the Fibonacci sequence are:\n" );
    label_7: ;
    if(local[0]<local[1]) goto labal_9;
    goto label_8;
    label_9: ;
        local[2] = fib ( local[0] );
        write ( local[2] );
        local[3] = local[0] + 1;
        local[0] = local[3];
    goto label_7: ;
    label_8: ;
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func getinput -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int coneradius 0 ]
   Symbol [ int coneheight 1 ]
   Symbol [ int circleradius 2 ]
   Symbol [ int trianglebase 3 ]
   Symbol [ int triangleheight 4 ]
   Symbol [ int sphereradius 5 ]
   Symbol [ int cone 6 ]
   Symbol [ int circle 7 ]
   Symbol [ int triangle 8 ]
   Symbol [ int sphere 9 ]
   Symbol [ int pi 10 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int getinput (){

    int local[1];


    local[0] = 0;
    label_0: ;
    if(0>=local[0]) goto labal_2;
    goto label_1;
    label_2: ;
        read ( local[0] );
        if(0>local[0])  goto label_3;
        goto label_4;
        label_3: ;
            print ( "I need a positive number: " );
        label_4: ;
    goto label_0: ;
    label_1: ;
    return local[0];
};
int main (){

    int local[34];

    local[10] = 3141;
    print ( "Give me a radius for the base of a cone: " );
    local[11] = getinput ( );
    local[0] = local[11];
    print ( "Give me a height for a cone: " );
    local[12] = getinput ( );
    local[1] = local[12];
    print ( "Give me a radius for a circle: " );
    local[13] = getinput ( );
    local[2] = local[13];
    print ( "Give me a length for the base of a triangle: " );
    local[14] = getinput ( );
    local[3] = local[14];
    print ( "Give me a height for a triangle: " );
    local[15] = getinput ( );
    local[4] = local[15];
    print ( "Give me a radius for a sphere: " );
    local[16] = getinput ( );
    local[5] = local[16];
    local[21] = local[0] * local[0];
    local[20] = local[1] * local[21];
    local[19] = local[10] * local[20];
    local[18] = local[19] + 500;
    local[17] = local[18] / 3000;
    local[6] = local[17];
    local[25] = local[2] * local[2];
    local[24] = local[10] * local[25];
    local[23] = local[24] + 500;
    local[22] = local[23] / 1000;
    local[7] = local[22];
    local[27] = local[3] * local[4];
    local[26] = local[27] / 2;
    local[8] = local[26];
    local[33] = local[5] * local[5];
    local[32] = local[10] * local[33];
    local[31] = local[5] * local[32];
    local[30] = 4 * local[31];
    local[29] = local[30] + 500;
    local[28] = local[29] / 3000;
    local[9] = local[28];
    print ( "The volume of the cone is: " );
    write ( local[6] );
    print ( "The area of the circle is: " );
    write ( local[7] );
    print ( "The area of the triangle is: " );
    write ( local[8] );
    print ( "The volume of the sphere is: " );
    write ( local[9] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func g -1 ]
   Symbol [ func f -1 ]
   Symbol [ func e -1 ]
   Symbol [ func d -1 ]
   Symbol [ func c -1 ]
   Symbol [ func b -1 ]
   Symbol [ func a -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
   Symbol [ int val 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int g (){

    return 1;
};
int f (){

    int local[2];

    local[1] = g ( );
    local[0] = local[1] + 1;
    return local[0];
};
int e (){

    int local[2];

    local[1] = f ( );
    local[0] = local[1] + 1;
    return local[0];
};
int d (){

    int local[2];

    local[1] = e ( );
    local[0] = local[1] + 1;
    return local[0];
};
int c (){

    int local[2];

    local[1] = d ( );
    local[0] = local[1] + 1;
    return local[0];
};
int b (){

    int local[2];

    local[1] = c ( );
    local[0] = local[1] + 1;
    return local[0];
};
int a (){

    int local[2];

    local[1] = b ( );
    local[0] = local[1] + 1;
    return local[0];
};
int main (){

    int local[2];

    local[1] = a ( );
    local[0] = local[1];
    print ( "I calculate the answer to be: " );
    write ( local[0] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func c -1 ]
   Symbol [ func b -1 ]
   Symbol [ func a -1 ]
   Symbol [ func foo -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
   Symbol [ int c 2 ]
--SYMBOLS--
   Symbol [ int val 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int c (){

    return 1;
};
int b (){

    return 2;
};
int a (){

    return 3;
};
int foo ( int a, int b, int c ){

    int local[7];

    local[0] = a;
    local[1] = b;
    local[2] = c;

    local[4] = local[0] * 3;
    local[6] = local[1] * 2;
    local[5] = local[2] + local[6];
    local[3] = local[4] + local[5];
    return local[3];
};
int main (){

    int local[5];

    local[2] = a ( );
    local[3] = b ( );
    local[4] = c ( );
    local[1] = foo ( local[2] , local[3] , local[4] );
    local[0] = local[1];
    print ( "I calculate the answer to be: " );
    write ( local[0] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ int array_1 0 ]
   Symbol [ int array_2 4 ]
   Symbol [ func populate_arrays -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int global[8];
int populate_arrays (){


    global[0] = 0;
    global[0] = 1;
    global[0] = 1;
    global[0] = 2;
    global[4] = 3;
    global[4] = 5;
    global[4] = 8;
    global[4] = 13;
};
int main (){

    int local[4];


    populate_arrays ( );
    local[0] = 0;
    local[1] = 8;
    print ( "The first few digits of the Fibonacci sequence are:\n" );
    label_0: ;
    if(local[0]<local[1]) goto labal_2;
    goto label_1;
    label_2: ;
        local[2] = global[0] local[0];
        write ( local[2] );
        local[3] = local[0] + 1;
        local[0] = local[3];
    goto label_0: ;
    label_1: ;
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int sum 1 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int main (){

    int local[4];

    read ( local[0] );
    local[1] = 0;
    label_0: ;
    if(local[0]>0) goto labal_2;
    goto label_1;
    label_2: ;
        local[2] = local[1] + local[0];
        local[1] = local[2];
        local[3] = local[0] - 1;
        local[0] = local[3];
    goto label_0: ;
    label_1: ;
    write ( local[1] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func square -1 ]
   Symbol [ func complex_abs_squared -1 ]
   Symbol [ func check_for_bail -1 ]
   Symbol [ func absval -1 ]
   Symbol [ func checkpixel -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int x 0 ]
--SYMBOLS--
   Symbol [ int real 0 ]
   Symbol [ int imag 1 ]
--SYMBOLS--
   Symbol [ int real 0 ]
   Symbol [ int imag 1 ]
--SYMBOLS--
   Symbol [ int x 0 ]
--SYMBOLS--
   Symbol [ int real 0 ]
   Symbol [ int imag 1 ]
   Symbol [ int temp 2 ]
   Symbol [ int iter 3 ]
   Symbol [ int bail 4 ]
   Symbol [ int x 5 ]
   Symbol [ int y 6 ]
--SYMBOLS--
   Symbol [ int x 0 ]
   Symbol [ int y 1 ]
   Symbol [ int on 2 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int square ( int x ){

    int local[4];

    local[0] = x;

    local[3] = local[0] * local[0];
    local[2] = local[3] + 500;
    local[1] = local[2] / 1000;
    return local[1];
};
int complex_abs_squared ( int real, int imag ){

    int local[5];

    local[0] = real;
    local[1] = imag;

    local[3] = square ( local[0] );
    local[4] = square ( local[1] );
    local[2] = local[3] + local[4];
    return local[2];
};
int check_for_bail ( int real, int imag ){

    int local[3];

    local[0] = real;
    local[1] = imag;

    if(local[0]>4000 )  goto label_0;
    goto label_1;
    label_0: ;
        return 0;
    label_1: ;
    local[2] = complex_abs_squared ( local[0] , local[1] );
    if(1600>local[2])  goto label_2;
    goto label_3;
    label_2: ;
        return 0;
    label_3: ;
    return 1;
};
int absval ( int x ){

    int local[3];

    local[0] = x;

    if(local[0]<0)  goto label_4;
    goto label_5;
    label_4: ;
        local[2] = - 1;
        local[1] = local[2] * local[0];
        return local[1];
    label_5: ;
    return local[0];
};
int checkpixel ( int x, int y ){

    int local[20];

    local[5] = x;
    local[6] = y;

    local[0] = 0;
    local[1] = 0;
    local[3] = 0;
    local[4] = 16000;
    label_6: ;
    if(local[3]<255) goto labal_8;
    goto label_7;
    label_8: ;
        local[8] = square ( local[0] );
        local[10] = square ( local[1] );
        local[9] = local[5] + local[10];
        local[7] = local[8] - local[9];
        local[2] = local[7];
        local[15] = local[1] * local[0];
        local[14] = 2 * local[15];
        local[13] = local[14] + 500;
        local[12] = local[13] / 1000;
        local[11] = local[12] + local[6];
        local[1] = local[11];
        local[0] = local[2];
        local[17] = absval ( local[0] );
        local[18] = absval ( local[1] );
        local[16] = local[17] + local[18];
        if(local[16]>5000)  goto label_9;
        goto label_10;
        label_9: ;
            return 0;
        label_10: ;
        local[19] = local[3] + 1;
        local[3] = local[19];
    goto label_6: ;
    label_7: ;
    return 1;
};
int main (){

    int local[8];

    local[1] = 950;
    label_11: ;
    local[3] = - 950;
    if(local[1]>local[3]) goto labal_13;
    goto label_12;
    label_13: ;
        local[4] = - 2100;
        local[0] = local[4];
        label_14: ;
        if(local[0]<1000) goto labal_16;
        goto label_15;
        label_16: ;
            local[5] = checkpixel ( local[0] , local[1] );
            local[2] = local[5];
            if(1==local[2])  goto label_17;
            goto label_18;
            label_17: ;
                print ( "X" );
            label_18: ;
            if(0==local[2])  goto label_19;
            goto label_20;
            label_19: ;
                print ( " " );
            label_20: ;
            local[6] = local[0] + 40;
            local[0] = local[6];
        goto label_14: ;
        label_15: ;
        print ( "\n" );
        local[7] = local[1] - 50;
        local[1] = local[7];
    goto label_11: ;
    label_12: ;
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func max -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int max ( int a, int b ){

    int local[2];

    local[0] = a;
    local[1] = b;

    if(local[0]>local[1])  goto label_0;
    goto label_1;
    label_0: ;
        return local[0];
    label_1: ;
    return local[1];
};
int main (){

    int local[3];

    read ( local[0] );
    read ( local[1] );
    local[2] = max ( local[0] , local[1] );
    write ( local[2] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func foo -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int m 0 ]
   Symbol [ int n 1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int foo ( int m, int n ){

    int local[4];

    local[0] = m;
    local[1] = n;

    local[2] = local[0] + local[1];
    local[0] = local[2];
    local[3] = local[1] + local[0];
    local[1] = local[3];
};
int main (){

    int local[1];

    read ( local[0] );
    foo ( local[0] , local[0] );
    write ( local[0] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func print_two -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
--SYMBOLS--
   Symbol [ binary b 0 ]
   Symbol [ decimal a 1 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define binary int
#define decimal int
int print_two ( int a, int b ){

    int local[2];

    local[0] = a;
    local[1] = b;

    write ( local[0] );
    write ( local[1] );
};
int main (){

    int local[2];

    read ( local[1] );
    read ( local[0] );
    print_two ( local[1] , local[0] );
    print_two ( local[0] , local[1] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func recursionsum -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int n 0 ]
--SYMBOLS--
   Symbol [ int a 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int recursionsum ( int n ){

    int local[4];

    local[0] = n;

    if(local[0]==0)  goto label_0;
    goto label_1;
    label_0: ;
        return 0;
    label_1: ;
    local[3] = local[0] - 1;
    local[2] = recursionsum ( local[3] );
    local[1] = local[0] + local[2];
    return local[1];
};
int main (){

    int local[2];

    read ( local[0] );
    local[1] = recursionsum ( local[0] );
    write ( local[1] );
};

===EXIT NORMAL!===
INFO : removing unused var b.
--SYMBOLS--
   Symbol [ func add -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int b 0 ]
   Symbol [ int a 1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int add ( int a ){

    int local[3];

    local[1] = a;

    read ( local[0] );
    local[2] = local[1] + local[0];
    return local[2];
};
int main (){

    int local[2];

    read ( local[0] );
    local[1] = add ( local[0] );
    write ( local[1] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func recursedigit -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int on 0 ]
   Symbol [ int n 1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int recursedigit ( int n ){

    int local[6];

    local[1] = n;

    if(0==local[1])  goto label_0;
    goto label_1;
    label_0: ;
        return;
    label_1: ;
    local[0] = 0;
    local[4] = local[1] / 2;
    local[3] = local[4] * 2;
    local[2] = local[1] - local[3];
    if(0!=local[2])  goto label_2;
    goto label_3;
    label_2: ;
        local[0] = 1;
    label_3: ;
    local[5] = local[1] / 2;
    recursedigit ( local[5] );
    if(0==local[0])  goto label_4;
    goto label_5;
    label_4: ;
        print ( "0" );
    label_5: ;
    if(1==local[0])  goto label_6;
    goto label_7;
    label_6: ;
        print ( "1" );
    label_7: ;
};
int main (){

    int local[1];

    local[0] = 0;
--SYMBOLS--
   Symbol [ func g -1 ]
   Symbol [ func f -1 ]
   Symbol [ func e -1 ]
   Symbol [ func d -1 ]
   Symbol [ func c -1 ]
   Symbol [ func b -1 ]
   Symbol [ func a -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
   Symbol [ int val 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int g (){

    return 1;
};
int f (){

    int local[2];

    local[1] = g ( );
    local[0] = local[1] + 1;
    return local[0];
};
int e (){

    int local[2];

    local[1] = f ( );
    local[0] = local[1] + 1;
    return local[0];
};
int d (){

    int local[2];

    local[1] = e ( );
    local[0] = local[1] + 1;
    return local[0];
};
int c (){

    int local[2];

    local[1] = d ( );
    local[0] = local[1] + 1;
    return local[0];
};
int b (){

    int local[2];

    local[1] = c ( );
    local[0] = local[1] + 1;
    return local[0];
};
int a (){

    int local[2];

    local[1] = b ( );
    local[0] = local[1] + 1;
    return local[0];
};
int main (){

    int local[2];

    local[1] = a ( );
    local[0] = local[1];
    print ( "I calculate the answer to be: " );
    write ( local[0] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ int array_1 0 ]
   Symbol [ int array_2 16 ]
   Symbol [ int array_3 32 ]
   Symbol [ int array_4 48 ]
   Symbol [ func populate_arrays -1 ]
   Symbol [ func print_arrays -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
   Symbol [ int temp 2 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int global[64];
int populate_arrays (){


    global[0] = 0;
    global[16] = 15;
    global[32] = 5;
    global[48] = 13;
    global[0] = 1;
    global[16] = 14;
    global[32] = 5;
    global[48] = 9;
    global[0] = 2;
    global[16] = 13;
    global[32] = 5;
    global[48] = 12;
    global[0] = 3;
    global[16] = 12;
    global[32] = 5;
    global[48] = 1;
    global[0] = 4;
    global[16] = 11;
    global[32] = 5;
    global[48] = 0;
    global[0] = 5;
    global[16] = 10;
    global[32] = 5;
    global[48] = 14;
    global[0] = 6;
    global[16] = 9;
    global[32] = 5;
    global[48] = 3;
    global[0] = 7;
    global[16] = 8;
    global[32] = 5;
    global[48] = 2;
    global[0] = 8;
    global[16] = 7;
    global[32] = 5;
    global[48] = 11;
    global[0] = 9;
    global[16] = 6;
    global[32] = 5;
    global[48] = 8;
    global[0] = 10;
    global[16] = 5;
    global[32] = 5;
    global[48] = 6;
    global[0] = 11;
    global[16] = 4;
    global[32] = 5;
    global[48] = 4;
    global[0] = 12;
    global[16] = 3;
    global[32] = 5;
    global[48] = 5;
    global[0] = 13;
    global[16] = 2;
    global[32] = 5;
    global[48] = 10;
    global[0] = 14;
    global[16] = 1;
    global[32] = 5;
    global[48] = 7;
    global[0] = 15;
    global[16] = 0;
    global[32] = 5;
    global[48] = 15;
};
int print_arrays (){

    int local[10];


    local[1] = 16;
    print ( "Array_1:\n" );
    local[0] = 0;
    label_0: ;
    if(local[0]<local[1]) goto labal_2;
    goto label_1;
    label_2: ;
        local[2] = global[0] local[0];
        write ( local[2] );
        local[3] = local[0] + 1;
        local[0] = local[3];
    goto label_0: ;
    label_1: ;
    print ( "\nArray_2:\n" );
    local[0] = 0;
    label_3: ;
    if(local[0]<local[1]) goto labal_5;
    goto label_4;
    label_5: ;
        local[4] = global[16] local[0];
        write ( local[4] );
        local[5] = local[0] + 1;
        local[0] = local[5];
    goto label_3: ;
    label_4: ;
    print ( "\nArray_3:\n" );
    local[0] = 0;
    label_6: ;
    if(local[0]<local[1]) goto labal_8;
    goto label_7;
    label_8: ;
        local[6] = global[32] local[0];
        write ( local[6] );
        local[7] = local[0] + 1;
        local[0] = local[7];
    goto label_6: ;
    label_7: ;
    print ( "\nArray_4:\n" );
    local[0] = 0;
    label_9: ;
    if(local[0]<local[1]) goto labal_11;
    goto label_10;
    label_11: ;
        local[8] = global[48] local[0];
        write ( local[8] );
        local[9] = local[0] + 1;
        local[0] = local[9];
    goto label_9: ;
    label_10: ;
    print ( "\n" );
};
int main (){

    int local[39];

    local[1] = 16;
    populate_arrays ( );
    print_arrays ( );
    local[1] = 16;
    local[0] = 0;
    label_12: ;
    local[3] = local[1] - 1;
    if(local[0]<local[3]) goto labal_14;
    goto label_13;
    label_14: ;
        local[4] = global[0] local[0];
        local[6] = local[0] + 1;
        local[5] = global[0] local[6];
        if(local[4]>local[5])  goto label_15;
        goto label_16;
        label_15: ;
            local[7] = global[0] local[0];
            local[2] = local[7];
            local[9] = local[0] + 1;
            local[8] = global[0] local[9];
            global[0] = local[8];
            global[0] = local[2];
            local[0] = 0;
            goto label_12
        label_16: ;
        local[10] = local[0] + 1;
        local[0] = local[10];
    goto label_12: ;
    label_13: ;
    local[0] = 0;
    label_17: ;
    local[11] = local[1] - 1;
    if(local[0]<local[11]) goto labal_19;
    goto label_18;
    label_19: ;
        local[12] = global[16] local[0];
        local[14] = local[0] + 1;
        local[13] = global[16] local[14];
        if(local[12]>local[13])  goto label_20;
        goto label_21;
        label_20: ;
            local[15] = global[16] local[0];
            local[2] = local[15];
            local[17] = local[0] + 1;
            local[16] = global[16] local[17];
            global[16] = local[16];
            global[16] = local[2];
            local[0] = 0;
            goto label_17
        label_21: ;
        local[18] = local[0] + 1;
        local[0] = local[18];
    goto label_17: ;
    label_18: ;
    local[0] = 0;
    label_22: ;
    local[19] = local[1] - 1;
    if(local[0]<local[19]) goto labal_24;
    goto label_23;
    label_24: ;
        local[20] = global[32] local[0];
        local[22] = local[0] + 1;
        local[21] = global[32] local[22];
        if(local[20]>local[21])  goto label_25;
        goto label_26;
        label_25: ;
            local[23] = global[0] local[0];
            local[2] = local[23];
            local[25] = local[0] + 1;
            local[24] = global[32] local[25];
            global[32] = local[24];
            global[32] = local[2];
            local[0] = 0;
            goto label_22
        label_26: ;
        local[26] = local[0] + 1;
        local[0] = local[26];
    goto label_22: ;
    label_23: ;
    local[0] = 0;
    label_27: ;
    local[27] = local[1] - 1;
    if(local[0]<local[27]) goto labal_29;
    goto label_28;
    label_29: ;
        local[28] = global[48] local[0];
        local[30] = local[0] + 1;
        local[29] = global[48] local[30];
        if(local[28]>local[29])  goto label_30;
        goto label_31;
        label_30: ;
            local[31] = global[48] local[0];
            local[2] = local[31];
            local[33] = local[0] + 1;
            local[32] = global[48] local[33];
            global[48] = local[32];
            global[48] = local[2];
            local[0] = 0;
            goto label_27
        label_31: ;
        local[34] = local[0] + 1;
        local[0] = local[34];
    goto label_27: ;
    label_28: ;
    print_arrays ( );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func square -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int x 0 ]
--SYMBOLS--
   Symbol [ int val 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int square ( int x ){

    int local[2];

    local[0] = x;

    local[0] = 10;
    local[1] = local[0] * local[0];
    return local[1];
};
int main (){

    int local[2];


    print ( "Give me a number: " );
    read ( local[0] );
    print ( "Your number squared is: " );
    local[1] = square ( local[0] );
    write ( local[1] );
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func getinput -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int line1 0 ]
   Symbol [ int line2 1 ]
   Symbol [ int line3 2 ]
   Symbol [ int line4 3 ]
   Symbol [ int line5 4 ]
   Symbol [ int line6 5 ]
   Symbol [ int line7 6 ]
   Symbol [ int line8 7 ]
   Symbol [ int line9 8 ]
   Symbol [ int line10 9 ]
   Symbol [ int line11 10 ]
   Symbol [ int line12 11 ]
   Symbol [ int dependant 12 ]
   Symbol [ int single 13 ]
   Symbol [ int a 14 ]
   Symbol [ int b 15 ]
   Symbol [ int c 16 ]
   Symbol [ int d 17 ]
   Symbol [ int e 18 ]
   Symbol [ int f 19 ]
   Symbol [ int g 20 ]
   Symbol [ int eic 21 ]
   Symbol [ int spousedependant 22 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
#define print(x) printf(x)
int getinput (){

    int local[2];


    local[1] = - 1;
    local[0] = local[1];
    label_0: ;
    if(0>local[0]) goto labal_2;
    goto label_1;
    label_2: ;
        read ( local[0] );
        if(0>local[0])  goto label_3;
        goto label_4;
        label_3: ;
            print ( "I need a non-negative number: " );
        label_4: ;
    goto label_0: ;
    label_1: ;
    return local[0];
};
int main (){

    int local[43];

    print ( "Welcome to the United States 1040 federal income tax program.\n" );
    print ( "(Note: this isn't the real 1040 form. If you try to submit your\n" );
    print ( "taxes this way, you'll get what you deserve!\n\n" );
    print ( "Answer the following questions to determine what you owe.\n\n" );
    print ( "Total wages, salary, and tips? " );
    local[23] = getinput ( );
    local[0] = local[23];
    print ( "Taxable interest (such as from bank accounts)? " );
    local[24] = getinput ( );
    local[1] = local[24];
    print ( "Unemployment compensation, qualified state tuition, and Alaska\n" );
    print ( "Permanent Fund dividends? " );
    local[25] = getinput ( );
    local[2] = local[25];
    local[27] = local[2] + local[1];
    local[26] = local[0] + local[27];
    local[3] = local[26];
    print ( "Your adjusted gross income is: " );
    write ( local[3] );
    local[28] = getinput ( );
    local[12] = local[28];
    if(0!=local[12])  goto label_5;
    goto label_6;
    label_5: ;
        local[29] = local[0] + 250;
        local[14] = local[29];
        local[15] = 700;
        local[16] = local[15];
        if(local[16]<local[14])  goto label_7;
        goto label_8;
        label_7: ;
            local[16] = local[14];
        label_8: ;
        local[30] = getinput ( );
        local[13] = local[30];
        if(0!=local[13])  goto label_9;
        goto label_10;
        label_9: ;
            local[17] = 7350;
        label_10: ;
        if(0==local[13])  goto label_11;
        goto label_12;
        label_11: ;
            local[17] = 4400;
        label_12: ;
        local[18] = local[16];
        if(local[18]>local[17])  goto label_13;
        goto label_14;
        label_13: ;
            local[18] = local[17];
        label_14: ;
        local[19] = 0;
        if(local[13]==0)  goto label_15;
        goto label_16;
        label_15: ;
            local[31] = getinput ( );
            local[22] = local[31];
            if(0==local[22])  goto label_17;
            goto label_18;
            label_17: ;
                local[19] = 2800;
            label_18: ;
        label_16: ;
        local[32] = local[18] + local[19];
        local[20] = local[32];
        local[4] = local[20];
    label_6: ;
    if(0==local[12])  goto label_19;
    goto label_20;
    label_19: ;
        local[33] = getinput ( );
        local[13] = local[33];
        if(0!=local[13])  goto label_21;
        goto label_22;
        label_21: ;
            local[4] = 12950;
        label_22: ;
        if(0==local[13])  goto label_23;
        goto label_24;
        label_23: ;
            local[4] = 7200;
        label_24: ;
    label_20: ;
    local[34] = local[3] - local[4];
    local[5] = local[34];
    if(local[5]<0)  goto label_25;
    goto label_26;
    label_25: ;
        local[5] = 0;
    label_26: ;
    print ( "Your taxable income is: " );
    write ( local[5] );
    print ( "Enter the amount of Federal income tax withheld: " );
    local[35] = getinput ( );
    local[6] = local[35];
    print ( "enter 0 otherwise: " );
    local[36] = getinput ( );
    local[21] = local[36];
    local[7] = 0;
    if(0!=local[21])  goto label_27;
    goto label_28;
    label_27: ;
        print ( "OK, I'll give you a thousand dollars for your credit.\n" );
        local[7] = 1000;
    label_28: ;
    local[37] = local[7] + local[6];
    local[8] = local[37];
    print ( "Your total tax payments amount to: " );
    write ( local[8] );
    local[40] = local[5] * 28;
    local[39] = local[40] + 50;
    local[38] = local[39] / 100;
    local[9] = local[38];
    print ( "Your total tax liability is: " );
    write ( local[9] );
    local[41] = local[8] - local[9];
    local[10] = local[41];
    if(local[10]<0)  goto label_29;
    goto label_30;
    label_29: ;
        local[10] = 0;
    label_30: ;
    if(local[10]>0)  goto label_31;
    goto label_32;
    label_31: ;
        print ( "Congratulations, you get a tax refund of $" );
        write ( local[10] );
    label_32: ;
    local[42] = local[9] - local[8];
    local[11] = local[42];
    if(local[11]>=0)  goto label_33;
    goto label_34;
    label_33: ;
        print ( "Bummer. You owe the IRS a check for $" );
        write ( local[11] );
    label_34: ;
    if(local[11]<0)  goto label_35;
    goto label_36;
    label_35: ;
        local[11] = 0;
    label_36: ;
    print ( "Thank you for using ez-tax.\n" );
};

===EXIT NORMAL!===
INFO : removing unused var no_a.
INFO : removing unused var no_b.
INFO : removing unused var no_l.
INFO : removing unused var no_p.
--SYMBOLS--
   Symbol [ int yes_a 0 ]
   Symbol [ int yes_b 1 ]
   Symbol [ func a -1 ]
--SYMBOLS--
   Symbol [ int yes_l 0 ]
   Symbol [ int yes_p 1 ]
int global[2];
int a ( int yes_p, int no_p ){

    int local[4];

    local[1] = yes_p;

    local[3] = a ( global[0] , global[1] );
    local[2] = local[1] + local[3];
    local[0] = local[2];
    return 7;
};

===EXIT NORMAL!===
INFO : removing unused var b.
--SYMBOLS--
   Symbol [ func add -1 ]
   Symbol [ func times_eight -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int a 0 ]
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int add ( int a, int b ){

    int local[3];

    local[0] = a;
    local[1] = b;

    local[2] = local[0] + local[1];
    return local[2];
};
int times_eight ( int a ){

    int local[8];

    local[0] = a;

    local[3] = add ( local[0] , local[0] );
    local[4] = add ( local[0] , local[0] );
    local[2] = add ( local[3] , local[4] );
    local[6] = add ( local[0] , local[0] );
    local[7] = add ( local[0] , local[0] );
    local[5] = add ( local[6] , local[7] );
    local[1] = add ( local[2] , local[5] );
    return local[1];
};
int main (){

    int local[2];

    read ( local[0] );
    local[1] = times_eight ( local[0] );
    write ( local[1] );
};

===EXIT NORMAL!===
INFO : removing unused var k.
--SYMBOLS--
   Symbol [ func a2 -1 ]
--SYMBOLS--
   Symbol [ int v 0 ]
   Symbol [ decimal j 1 ]
   Symbol [ decimal e 2 ]
#define taco 1
#define monky taco
int a2 ( decimal j, decimal e ){

    int local[8];

    local[1] = j;
    local[2] = e;

    local[0] = local[1];
    local[3] = local[1] + 2;
    local[6] = local[2] - local[1];
    local[5] = 5 + local[6];
    local[4] = local[0] - local[5];
    a2 ( local[3] , local[4] );
    if(==1 )  goto label_0;
    goto label_1;
    label_0: ;
        local[7] = local[0] + 2;
        local[0] = local[7];
    label_1: ;
    return local[0];
};

===EXIT NORMAL!===
--SYMBOLS--
   Symbol [ func foo -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
#define read(x) scanf("%d",&x)
#define write(x) printf("%d\n",x)
int foo (){

    int local[1];

    read ( local[0] );
    write ( local[0] );
};
int main (){

    foo ( );
};

===EXIT NORMAL!===
