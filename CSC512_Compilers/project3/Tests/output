
Testing ./Tests/automaton.c

===EXIT NORMAL!===

Testing ./Tests/binrep.c

===EXIT NORMAL!===

Testing ./Tests/branch.c
pass
variable 2 function 1 statement 6
--SYMBOLS--
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
int global[0];

int main (){

    int local[4];

    local[2] = ( local[1] > local[0] );
    if ( local[2] );
    local[3] = ( local[0] >= local[1] );
    if ( local[3] );
     ( );
};

===EXIT NORMAL!===

Testing ./Tests/errorString.c

Testing ./Tests/exp.c
pass
variable 4 function 2 statement 4
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
   Symbol [ int c 2 ]
   Symbol [ func f -1 ]
   Symbol [ func d -1 ]
--SYMBOLS--
--SYMBOLS--
   Symbol [ int g 0 ]
   Symbol [ int e -1 ]
   Symbol [ int f -1 ]
int global[3];

int f (){

    int local[1];

    local[0] = global[0] + global[1];
    return local[0];
};
int d ( int e, int f ){

    int local[6];

    f ( );
    local[4] = f [ global[0] ];
    local[3] = e * local[4];
    local[5] = global[1] * global[2];
    local[2] = local[3] - local[5];
    local[1] = global[0] + local[2];
    local[0] = local[1];
    return local[0];
};

===EXIT NORMAL!===

Testing ./Tests/expression.c
pass
variable 2 function 1 statement 3
--SYMBOLS--
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int sum 1 ]
int global[0];

int main (){

    int local[6];

     ( );
    local[4] = local[0] + 1;
    local[3] = ( local[4] );
    local[5] = 2 / local[0];
    local[2] = local[3] * local[5];
    local[1] = local[2];
     ( );
};

===EXIT NORMAL!===

Testing ./Tests/fibonacci.c
pass
variable 5 function 3 statement 17
--SYMBOLS--
   Symbol [ int array 0 ]
   Symbol [ func initialize_array -1 ]
   Symbol [ func fib -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
--SYMBOLS--
   Symbol [ int val -1 ]
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
int global[1];

int initialize_array (){

    int local[5];

    local[1] = 16;
    local[0] = 0;
    local[2] = ( local[0] < local[1] );
    while ( local[2] );
};
int fib ( int val ){

    int local[10];

    local[0] = ( val < 2 );
    if ( local[0] );
    local[2] = global[0] [ val ];
    local[3] = - 1;
    local[1] = ( local[2] == local[3] );
    if ( local[1] );
    local[4] = global[0] [ val ];
    return local[4];
};
int main (){

    int local[5];

    local[1] = 16;
    initialize_array ( );
    local[0] = 0;
    print ( "The first few digits of the Fibonacci sequence are:\n" );
    local[2] = ( local[0] < local[1] );
    while ( local[2] );
};

===EXIT NORMAL!===

Testing ./Tests/formulae.c
pass
variable 12 function 2 statement 31
--SYMBOLS--
   Symbol [ func getinput -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int coneradius 0 ]
   Symbol [ int coneheight 1 ]
   Symbol [ int circleradius 2 ]
   Symbol [ int trianglebase 3 ]
   Symbol [ int triangleheight 4 ]
   Symbol [ int sphereradius 5 ]
   Symbol [ int cone 6 ]
   Symbol [ int circle 7 ]
   Symbol [ int triangle 8 ]
   Symbol [ int sphere 9 ]
   Symbol [ int pi 10 ]
int global[0];

int getinput (){

    int local[3];

    return local[0];
    local[1] = ( 0 >= local[0] );
    while ( local[1] );
    local[0] = 0;
};
int main (){

    int local[38];

    local[10] = 3141;
    print ( "Give me a radius for the base of a cone: " );
    local[11] = getinput ( );
    local[0] = local[11];
    print ( "Give me a height for a cone: " );
    local[12] = getinput ( );
    local[1] = local[12];
    print ( "Give me a radius for a circle: " );
    local[13] = getinput ( );
    local[2] = local[13];
    print ( "Give me a length for the base of a triangle: " );
    local[14] = getinput ( );
    local[3] = local[14];
    print ( "Give me a height for a triangle: " );
    local[15] = getinput ( );
    local[4] = local[15];
    print ( "Give me a radius for a sphere: " );
    local[16] = getinput ( );
    local[5] = local[16];
    local[22] = local[0] * local[0];
    local[21] = local[1] * local[22];
    local[20] = local[10] * local[21];
    local[19] = local[20] + 500;
    local[18] = ( local[19] );
    local[17] = local[18] / 3000;
    local[6] = local[17];
    local[27] = local[2] * local[2];
    local[26] = local[10] * local[27];
    local[25] = local[26] + 500;
    local[24] = ( local[25] );
    local[23] = local[24] / 1000;
    local[7] = local[23];
    local[30] = local[3] * local[4];
    local[29] = ( local[30] );
    local[28] = local[29] / 2;
    local[8] = local[28];
    local[37] = local[5] * local[5];
    local[36] = local[10] * local[37];
    local[35] = local[5] * local[36];
    local[34] = 4 * local[35];
    local[33] = local[34] + 500;
    local[32] = ( local[33] );
    local[31] = local[32] / 3000;
    local[9] = local[31];
    print ( "The volume of the cone is: " );
    getinput ( );
    print ( "The area of the circle is: " );
    getinput ( );
    print ( "The area of the triangle is: " );
    print ( "The volume of the sphere is: " );
    getinput ( );
};

===EXIT NORMAL!===

Testing ./Tests/funcall.c
Binary file (standard input) matches

Testing ./Tests/funcall2.c
pass
variable 1 function 5 statement 7
--SYMBOLS--
   Symbol [ func c -1 ]
   Symbol [ func b -1 ]
   Symbol [ func a -1 ]
   Symbol [ func foo -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
--SYMBOLS--
   Symbol [ int a -1 ]
   Symbol [ int b -1 ]
   Symbol [ int c -1 ]
--SYMBOLS--
   Symbol [ int val 0 ]
int global[0];

int c (){

    return 1;
};
int b (){

    return 2;
};
int a (){

    return 3;
};
int foo ( int a, int b, int c ){

    int local[5];

    local[2] = a * 3;
    local[4] = b * 2;
    local[3] = c + local[4];
    local[1] = local[2] + local[3];
    local[0] = ( local[1] );
    return local[0];
};
int main (){

    int local[5];

    local[1] = foo (  );
    local[0] = local[1];
    print ( "I calculate the answer to be: " );
    c ( );
};

===EXIT NORMAL!===

Testing ./Tests/illegal.c
pass
variable 4 function 2 statement 15
--SYMBOLS--
   Symbol [ int array_1 0 ]
   Symbol [ int array_2 1 ]
   Symbol [ func populate_arrays -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
int global[2];

int populate_arrays (){

    global[0] = 0;
    global[0] = 1;
    global[0] = 1;
    global[0] = 2;
    global[1] = 3;
    global[1] = 5;
    global[1] = 8;
    global[1] = 13;
};
int main (){

    int local[5];

    populate_arrays ( );
    local[0] = 0;
    local[1] = 8;
    print ( "The first few digits of the Fibonacci sequence are:\n" );
    local[2] = ( local[0] < local[1] );
    while ( local[2] );
};

===EXIT NORMAL!===

Testing ./Tests/loop.c
pass
variable 2 function 1 statement 6
--SYMBOLS--
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int sum 1 ]
int global[0];

int main (){

    int local[5];

    local[2] = ( local[0] > 0 );
    while ( local[2] );
    local[1] = 0;
};

===EXIT NORMAL!===

Testing ./Tests/mandel.c
pass
variable 8 function 6 statement 34
--SYMBOLS--
   Symbol [ func square -1 ]
   Symbol [ func complex_abs_squared -1 ]
   Symbol [ func check_for_bail -1 ]
   Symbol [ func absval -1 ]
   Symbol [ func checkpixel -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int x -1 ]
--SYMBOLS--
   Symbol [ int real -1 ]
   Symbol [ int imag -1 ]
--SYMBOLS--
   Symbol [ int real -1 ]
   Symbol [ int imag -1 ]
--SYMBOLS--
   Symbol [ int x -1 ]
--SYMBOLS--
   Symbol [ int real 0 ]
   Symbol [ int imag 1 ]
   Symbol [ int temp 2 ]
   Symbol [ int iter 3 ]
   Symbol [ int bail 4 ]
   Symbol [ int x -1 ]
   Symbol [ int y -1 ]
--SYMBOLS--
   Symbol [ int x 0 ]
   Symbol [ int y 1 ]
   Symbol [ int on 2 ]
int global[0];

int square ( int x ){

    int local[4];

    local[3] = x * x;
    local[2] = local[3] + 500;
    local[1] = ( local[2] );
    local[0] = local[1] / 1000;
    return local[0];
};
int complex_abs_squared ( int real, int imag ){

    int local[3];

    local[1] = square (  );
    local[2] = square (  );
    local[0] = local[1] + local[2];
    return local[0];
};
int check_for_bail ( int real, int imag ){

    int local[5];

    local[1] = ( real > 4000 );
    local[2] = ( imag > 4000 );
    local[0] = local[1] || local[2];
    if ( local[0] );
    local[4] = complex_abs_squared (  );
    local[3] = ( 1600 > local[4] );
    if ( local[3] );
    return 1;
};
int absval ( int x ){

    int local[3];

    local[0] = ( x < 0 );
    if ( local[0] );
    return x;
};
int checkpixel ( int x, int y ){

    int local[22];

    local[0] = 0;
    local[1] = 0;
    local[3] = 0;
    local[4] = 16000;
    local[5] = ( local[3] < 255 );
    while ( local[5] );
    return 1;
};
int main (){

    int local[12];

    local[1] = 950;
    local[4] = - 950;
    local[3] = ( local[1] > local[4] );
    while ( local[3] );
};

===EXIT NORMAL!===

Testing ./Tests/max.c
pass
variable 2 function 2 statement 6
--SYMBOLS--
   Symbol [ func max -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a -1 ]
   Symbol [ int b -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
int global[0];

int max ( int a, int b ){

    int local[1];

    return b;
    local[0] = ( a > b );
    if ( local[0] );
};
int main (){

    int local[3];

     ( );
    a ( );
};

===EXIT NORMAL!===

Testing ./Tests/parameter.c
pass
variable 1 function 2 statement 5
--SYMBOLS--
   Symbol [ func foo -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int m -1 ]
   Symbol [ int n -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
int global[0];

int foo ( int m, int n ){

    int local[2];

    local[0] = n + m;
    n = local[0];
    local[1] = m + n;
    m = local[1];
};
int main (){

    int local[1];

    m ( );
    foo ( );
     ( );
};

===EXIT NORMAL!===

Testing ./Tests/parse.c

Testing ./Tests/parse2.c

Testing ./Tests/polymorphism.c
pass
variable 2 function 2 statement 6
--SYMBOLS--
   Symbol [ func print_two -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a -1 ]
   Symbol [ int b -1 ]
--SYMBOLS--
   Symbol [ binary b 0 ]
   Symbol [ decimal a 1 ]
int global[0];

int print_two ( int a, int b ){

};
int main (){

    int local[2];

     ( );
     ( );
    print_two ( );
    print_two ( );
};

===EXIT NORMAL!===

Testing ./Tests/recursion.c
pass
variable 1 function 2 statement 5
--SYMBOLS--
   Symbol [ func recursionsum -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int n -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
int global[0];

int recursionsum ( int n ){

    int local[4];

    local[1] = recursionsum (  );
    local[0] = n + local[1];
    return local[0];
    local[2] = ( n == 0 );
    if ( local[2] );
};
int main (){

    int local[2];

    recursionsum ( );
};

===EXIT NORMAL!===

Testing ./Tests/samp1.c
pass
variable 3 function 2 statement 4
--SYMBOLS--
   Symbol [ func add -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int b 0 ]
   Symbol [ int a -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
int global[0];

int add ( int a ){

    int local[2];

    local[1] = a + local[0];
    return local[1];
    a ( );
};
int main (){

    int local[3];

     ( );
};

===EXIT NORMAL!===

Testing ./Tests/samp2.c
pass
variable 2 function 2 statement 21
--SYMBOLS--
   Symbol [ func recursedigit -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int on 0 ]
   Symbol [ int n -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
int global[0];

int recursedigit ( int n ){

    int local[12];

    local[1] = ( 1 == local[0] );
    if ( local[1] );
    local[2] = ( 0 == local[0] );
    if ( local[2] );
    recursedigit ( );
    local[9] = n / 2;
    local[8] = ( local[9] );
    local[7] = local[8] * 2;
    local[6] = ( local[7] );
    local[5] = n - local[6];
    local[4] = ( local[5] );
    local[3] = ( 0 != local[4] );
    if ( local[3] );
    local[0] = 0;
    local[10] = ( 0 == n );
    if ( local[10] );
};
int main (){

    int local[3];

    local[0] = 0;
    local[1] = ( 0 >= local[0] );
    while ( local[1] );
    print ( "The binary representation of: " );
    local[0] ( );
    print ( "is: " );
    recursedigit ( );
    print ( "\n\n" );
};

===EXIT NORMAL!===

Testing ./Tests/samp3.c
Binary file (standard input) matches

Testing ./Tests/sort.c
pass
variable 9 function 3 statement 127
--SYMBOLS--
   Symbol [ int array_1 0 ]
   Symbol [ int array_2 1 ]
   Symbol [ int array_3 2 ]
   Symbol [ int array_4 3 ]
   Symbol [ func populate_arrays -1 ]
   Symbol [ func print_arrays -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
--SYMBOLS--
   Symbol [ int idx 0 ]
   Symbol [ int bound 1 ]
   Symbol [ int temp 2 ]
int global[4];

int populate_arrays (){

    global[0] = 0;
    global[1] = 15;
    global[2] = 5;
    global[3] = 13;
    global[0] = 1;
    global[1] = 14;
    global[2] = 5;
    global[3] = 9;
    global[0] = 2;
    global[1] = 13;
    global[2] = 5;
    global[3] = 12;
    global[0] = 3;
    global[1] = 12;
    global[2] = 5;
    global[3] = 1;
    global[0] = 4;
    global[1] = 11;
    global[2] = 5;
    global[3] = 0;
    global[0] = 5;
    global[1] = 10;
    global[2] = 5;
    global[3] = 14;
    global[0] = 6;
    global[1] = 9;
    global[2] = 5;
    global[3] = 3;
    global[0] = 7;
    global[1] = 8;
    global[2] = 5;
    global[3] = 2;
    global[0] = 8;
    global[1] = 7;
    global[2] = 5;
    global[3] = 11;
    global[0] = 9;
    global[1] = 6;
    global[2] = 5;
    global[3] = 8;
    global[0] = 10;
    global[1] = 5;
    global[2] = 5;
    global[3] = 6;
    global[0] = 11;
    global[1] = 4;
    global[2] = 5;
    global[3] = 4;
    global[0] = 12;
    global[1] = 3;
    global[2] = 5;
    global[3] = 5;
    global[0] = 13;
    global[1] = 2;
    global[2] = 5;
    global[3] = 10;
    global[0] = 14;
    global[1] = 1;
    global[2] = 5;
    global[3] = 7;
    global[0] = 15;
    global[1] = 0;
    global[2] = 5;
    global[3] = 15;
};
int print_arrays (){

    int local[14];

    local[1] = 16;
    print ( "Array_1:\n" );
    local[0] = 0;
    local[2] = ( local[0] < local[1] );
    while ( local[2] );
    print ( "\nArray_2:\n" );
    local[0] = 0;
    local[3] = ( local[0] < local[1] );
    while ( local[3] );
    print ( "\nArray_3:\n" );
    local[0] = 0;
    local[4] = ( local[0] < local[1] );
    while ( local[4] );
    print ( "\nArray_4:\n" );
    local[0] = 0;
    local[5] = ( local[0] < local[1] );
    while ( local[5] );
    print ( "\n" );
};
int main (){

    int local[47];

    local[1] = 16;
    populate_arrays ( );
    print_arrays ( );
    local[1] = 16;
    local[0] = 0;
    local[4] = local[1] - 1;
    local[3] = ( local[0] < local[4] );
    while ( local[3] );
    local[0] = 0;
    local[6] = local[1] - 1;
    local[5] = ( local[0] < local[6] );
    while ( local[5] );
    local[0] = 0;
    local[8] = local[1] - 1;
    local[7] = ( local[0] < local[8] );
    while ( local[7] );
    local[0] = 0;
    local[10] = local[1] - 1;
    local[9] = ( local[0] < local[10] );
    while ( local[9] );
    print_arrays ( );
};

===EXIT NORMAL!===

Testing ./Tests/square.c
pass
variable 2 function 2 statement 6
--SYMBOLS--
   Symbol [ func square -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int x 0 ]
--SYMBOLS--
   Symbol [ int val 0 ]
int global[0];

int square ( int x ){

    int local[2];

    local[1] = local[0] * local[0];
    return local[1];
    local[0] = 10;
};
int main (){

    int local[2];

    print ( "Give me a number: " );
    print ( "Your number squared is: " );
    local[0] ( );
};

===EXIT NORMAL!===

Testing ./Tests/tax.c
pass
variable 24 function 2 statement 87
--SYMBOLS--
   Symbol [ func getinput -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
   Symbol [ int line1 0 ]
   Symbol [ int line2 1 ]
   Symbol [ int line3 2 ]
   Symbol [ int line4 3 ]
   Symbol [ int line5 4 ]
   Symbol [ int line6 5 ]
   Symbol [ int line7 6 ]
   Symbol [ int line8 7 ]
   Symbol [ int line9 8 ]
   Symbol [ int line10 9 ]
   Symbol [ int line11 10 ]
   Symbol [ int line12 11 ]
   Symbol [ int dependant 12 ]
   Symbol [ int single 13 ]
   Symbol [ int a 14 ]
   Symbol [ int b 15 ]
   Symbol [ int c 16 ]
   Symbol [ int d 17 ]
   Symbol [ int e 18 ]
   Symbol [ int f 19 ]
   Symbol [ int g 20 ]
   Symbol [ int eic 21 ]
   Symbol [ int spousedependant 22 ]
int global[0];

int getinput (){

    int local[4];

    return local[0];
    local[1] = ( 0 > local[0] );
    while ( local[1] );
    local[2] = - 1;
    local[0] = local[2];
};
int main (){

    int local[60];

    print ( "Welcome to the United States 1040 federal income tax program.\n" );
    print ( "(Note: this isn't the real 1040 form. If you try to submit your\n" );
    print ( "taxes this way, you'll get what you deserve!\n\n" );
    print ( "Answer the following questions to determine what you owe.\n\n" );
    print ( "Total wages, salary, and tips? " );
    local[23] = getinput ( );
    local[0] = local[23];
    print ( "Taxable interest (such as from bank accounts)? " );
    local[24] = getinput ( );
    local[1] = local[24];
    print ( "Unemployment compensation, qualified state tuition, and Alaska\n" );
    print ( "Permanent Fund dividends? " );
    local[25] = getinput ( );
    local[2] = local[25];
    local[27] = local[2] + local[1];
    local[26] = local[0] + local[27];
    local[3] = local[26];
    print ( "Your adjusted gross income is: " );
    local[28] = getinput ( );
    local[12] = local[28];
    local[29] = ( 0 != local[12] );
    if ( local[29] );
    local[30] = ( 0 == local[12] );
    if ( local[30] );
    local[31] = local[3] - local[4];
    local[5] = local[31];
    local[32] = ( local[5] < 0 );
    if ( local[32] );
    print ( "Your taxable income is: " );
    local[4] ( );
    print ( "Enter the amount of Federal income tax withheld: " );
    local[33] = getinput ( );
    local[6] = local[33];
    print ( "enter 0 otherwise: " );
    local[34] = getinput ( );
    local[21] = local[34];
    local[7] = 0;
    local[35] = ( 0 != local[21] );
    if ( local[35] );
    local[36] = local[7] + local[6];
    local[8] = local[36];
    print ( "Your total tax payments amount to: " );
    local[40] = local[5] * 28;
    local[39] = local[40] + 50;
    local[38] = ( local[39] );
    local[37] = local[38] / 100;
    local[9] = local[37];
    print ( "Your total tax liability is: " );
    local[12] ( );
    local[41] = local[8] - local[9];
    local[10] = local[41];
    local[42] = ( local[10] < 0 );
    if ( local[42] );
    local[43] = ( local[10] > 0 );
    if ( local[43] );
    local[44] = local[9] - local[8];
    local[11] = local[44];
    local[45] = ( local[11] >= 0 );
    if ( local[45] );
    local[46] = ( local[11] < 0 );
    if ( local[46] );
    print ( "Thank you for using ez-tax.\n" );
};

===EXIT NORMAL!===

Testing ./Tests/times8.c
pass
variable 2 function 3 statement 4
--SYMBOLS--
   Symbol [ func add -1 ]
   Symbol [ func times_eight -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a -1 ]
   Symbol [ int b -1 ]
--SYMBOLS--
   Symbol [ int a -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
   Symbol [ int b 1 ]
int global[0];

int add ( int a, int b ){

    int local[1];

    local[0] = a + b;
    return local[0];
};
int times_eight ( int a ){

    int local[7];

    local[0] = add (  );
    return local[0];
};
int main (){

    int local[3];

};

===EXIT NORMAL!===

Testing ./Tests/tiny.c
pass
variable 2 function 1 statement 5
--SYMBOLS--
   Symbol [ int k 0 ]
   Symbol [ func a2 -1 ]
--SYMBOLS--
   Symbol [ int v 0 ]
   Symbol [ decimal j -1 ]
   Symbol [ decimal e -1 ]
int global[1];

int a2 ( decimal j, decimal e ){

    int local[7];

    local[0] = j;
    a2 ( );
    local[1] = ( local[0] < e );
    while ( local[1] );
    return local[0];
};

===EXIT NORMAL!===

Testing ./Tests/trivial.c
pass
variable 1 function 2 statement 3
--SYMBOLS--
   Symbol [ func foo -1 ]
   Symbol [ func main -1 ]
--SYMBOLS--
   Symbol [ int a 0 ]
--SYMBOLS--
int global[0];

int foo (){

    int local[1];

     ( );
     ( );
};
int main (){

    foo ( );
};

===EXIT NORMAL!===
